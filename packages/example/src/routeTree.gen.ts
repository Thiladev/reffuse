/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TimeImport } from './routes/time'
import { Route as TestsImport } from './routes/tests'
import { Route as QueryImport } from './routes/query'
import { Route as PromiseImport } from './routes/promise'
import { Route as LazyrefImport } from './routes/lazyref'
import { Route as CountImport } from './routes/count'
import { Route as BlankImport } from './routes/blank'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TimeRoute = TimeImport.update({
  id: '/time',
  path: '/time',
  getParentRoute: () => rootRoute,
} as any)

const TestsRoute = TestsImport.update({
  id: '/tests',
  path: '/tests',
  getParentRoute: () => rootRoute,
} as any)

const QueryRoute = QueryImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => rootRoute,
} as any)

const PromiseRoute = PromiseImport.update({
  id: '/promise',
  path: '/promise',
  getParentRoute: () => rootRoute,
} as any)

const LazyrefRoute = LazyrefImport.update({
  id: '/lazyref',
  path: '/lazyref',
  getParentRoute: () => rootRoute,
} as any)

const CountRoute = CountImport.update({
  id: '/count',
  path: '/count',
  getParentRoute: () => rootRoute,
} as any)

const BlankRoute = BlankImport.update({
  id: '/blank',
  path: '/blank',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blank': {
      id: '/blank'
      path: '/blank'
      fullPath: '/blank'
      preLoaderRoute: typeof BlankImport
      parentRoute: typeof rootRoute
    }
    '/count': {
      id: '/count'
      path: '/count'
      fullPath: '/count'
      preLoaderRoute: typeof CountImport
      parentRoute: typeof rootRoute
    }
    '/lazyref': {
      id: '/lazyref'
      path: '/lazyref'
      fullPath: '/lazyref'
      preLoaderRoute: typeof LazyrefImport
      parentRoute: typeof rootRoute
    }
    '/promise': {
      id: '/promise'
      path: '/promise'
      fullPath: '/promise'
      preLoaderRoute: typeof PromiseImport
      parentRoute: typeof rootRoute
    }
    '/query': {
      id: '/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof QueryImport
      parentRoute: typeof rootRoute
    }
    '/tests': {
      id: '/tests'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof TestsImport
      parentRoute: typeof rootRoute
    }
    '/time': {
      id: '/time'
      path: '/time'
      fullPath: '/time'
      preLoaderRoute: typeof TimeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/count': typeof CountRoute
  '/lazyref': typeof LazyrefRoute
  '/promise': typeof PromiseRoute
  '/query': typeof QueryRoute
  '/tests': typeof TestsRoute
  '/time': typeof TimeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/count': typeof CountRoute
  '/lazyref': typeof LazyrefRoute
  '/promise': typeof PromiseRoute
  '/query': typeof QueryRoute
  '/tests': typeof TestsRoute
  '/time': typeof TimeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/count': typeof CountRoute
  '/lazyref': typeof LazyrefRoute
  '/promise': typeof PromiseRoute
  '/query': typeof QueryRoute
  '/tests': typeof TestsRoute
  '/time': typeof TimeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blank'
    | '/count'
    | '/lazyref'
    | '/promise'
    | '/query'
    | '/tests'
    | '/time'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blank'
    | '/count'
    | '/lazyref'
    | '/promise'
    | '/query'
    | '/tests'
    | '/time'
  id:
    | '__root__'
    | '/'
    | '/blank'
    | '/count'
    | '/lazyref'
    | '/promise'
    | '/query'
    | '/tests'
    | '/time'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlankRoute: typeof BlankRoute
  CountRoute: typeof CountRoute
  LazyrefRoute: typeof LazyrefRoute
  PromiseRoute: typeof PromiseRoute
  QueryRoute: typeof QueryRoute
  TestsRoute: typeof TestsRoute
  TimeRoute: typeof TimeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlankRoute: BlankRoute,
  CountRoute: CountRoute,
  LazyrefRoute: LazyrefRoute,
  PromiseRoute: PromiseRoute,
  QueryRoute: QueryRoute,
  TestsRoute: TestsRoute,
  TimeRoute: TimeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blank",
        "/count",
        "/lazyref",
        "/promise",
        "/query",
        "/tests",
        "/time"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blank": {
      "filePath": "blank.tsx"
    },
    "/count": {
      "filePath": "count.tsx"
    },
    "/lazyref": {
      "filePath": "lazyref.tsx"
    },
    "/promise": {
      "filePath": "promise.tsx"
    },
    "/query": {
      "filePath": "query.tsx"
    },
    "/tests": {
      "filePath": "tests.tsx"
    },
    "/time": {
      "filePath": "time.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
